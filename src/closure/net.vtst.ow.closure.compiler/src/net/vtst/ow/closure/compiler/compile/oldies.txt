  // goog.addDependency("asserts/asserts.js", ["goog.asserts", "goog.asserts.AssertionError"], ["goog.debug.Error", "goog.string"]);

  public final static String PATTERN_JS_STRING =
      "\\\"([^\\\"\\\\]|(\\\\[\\\"]))*\\\"";
  public final static String PATTERN_JS_STRING_LIST = 
      "\\[(" + PATTERN_JS_STRING + "(,[ ]*" + PATTERN_JS_STRING + ")*)?\\]";
  public final static String PATTERN_JS_SEP =
      "[ ]*,[ ]*";
  public final static Pattern pattern_string = Pattern.compile(PATTERN_JS_STRING);
  public final static Pattern pattern = Pattern.compile(
      "[ ]*goog\\.addDependency\\(" + 
      "(" + PATTERN_JS_STRING + ")" + PATTERN_JS_SEP + PATTERN_JS_STRING_LIST + PATTERN_JS_SEP + PATTERN_JS_STRING_LIST + "\\);[ ]*");
  
  private static String trimString(String string) {
    return string.replace(" ", "");
  }
  
  private static Iterable<String> splitDepsLine(String line) {
    ArrayList<String> result = new ArrayList<String>();
    Matcher matcher = pattern_string.matcher(line);
    int i = 0;
    while (matcher.find()) {
      if (matcher.start() > i)
        result.add(trimString(line.substring(i, matcher.start())));
      result.add(matcher.group());
      i = matcher.end();
    }
    if (line.length() > i)
      result.add(trimString(line.substring(i, line.length())));
    return result;
  }

  private static String parseJsString(String string) {
    int n = string.length();
    if (n < 2 ||
        string.charAt(0) != '"' && string.charAt(0) != '\'' ||
        string.charAt(n-1) != string.charAt(0)) 
      return "";
    return StringEscapeUtils.unescapeJavaScript(string.substring(1, n - 1));
  }

  private static Collection<String> parseJsStringList(String string) {
    System.out.println(string);
    Scanner scan;
    if (string == null) return Collections.emptyList();
    ArrayList<String> result = new ArrayList<String>();
    Matcher matcher = pattern_string.matcher(string);
    while (matcher.find()) {
      result.add(parseJsString(matcher.group()));
    }
    return result;
  }
