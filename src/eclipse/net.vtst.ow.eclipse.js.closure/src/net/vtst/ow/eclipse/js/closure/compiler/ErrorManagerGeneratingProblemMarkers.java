package net.vtst.ow.eclipse.js.closure.compiler;

import org.eclipse.core.resources.IMarker;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.IResourceVisitor;
import org.eclipse.core.runtime.CoreException;

import com.google.javascript.jscomp.BasicErrorManager;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.JSError;

/**
 * An error manager which generates problem markers for reporting errors.
 * @author Vincent Simonet
 */
public abstract class ErrorManagerGeneratingProblemMarkers extends BasicErrorManager {
  
  /**
   * @return  The types of the markers generated by this error manager.
   */
  public abstract String getMarkerType();
  
  /**
   * Sub-classes must implement this method to specify the set of resources it manages.
   * @return  The collection of resources controlled by this error manager.
   */
  protected abstract void accept(IResourceVisitor visitor) throws CoreException;
  
  protected abstract IResource getResource(String sourceName);
  
  private void clearProblemMarkers() throws CoreException {
    accept(new IResourceVisitor() {
      @Override
      public boolean visit(IResource resource) throws CoreException {
        for (IMarker marker : resource.findMarkers(getMarkerType(), false, 0)) {
          marker.delete();
        }
        return true;
      }
    });
  }

  @Override
  public void generateReport() {
    try {
      clearProblemMarkers();
    } catch (CoreException e) {}
    super.generateReport();
  }
  
  @Override
  protected void printSummary() {
  }

  @Override
  public void println(CheckLevel level, JSError error) {
    IResource file = getResource(error.sourceName);
    if (file == null) return;
    try {
      IMarker marker = file.createMarker(getMarkerType());
      marker.setAttribute(IMarker.SEVERITY, checkLevelToSeverity(level));
      marker.setAttribute(IMarker.MESSAGE, error.description);
      marker.setAttribute(IMarker.LINE_NUMBER, error.lineNumber);
      marker.setAttribute(IMarker.LOCATION, error.sourceName);
      // error.getCharno() for the char number in the line
    } catch (CoreException e) {
      e.printStackTrace();
    }
  }
  
  private int checkLevelToSeverity(CheckLevel level) {
    switch (level) {
    case ERROR: return IMarker.SEVERITY_ERROR;
    case WARNING: return IMarker.SEVERITY_WARNING;
    case OFF: default: return IMarker.SEVERITY_INFO;
    }
  }
}
