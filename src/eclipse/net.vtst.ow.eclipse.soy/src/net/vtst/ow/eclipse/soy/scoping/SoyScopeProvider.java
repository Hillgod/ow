/*
 * generated by Xtext
 */
package net.vtst.ow.eclipse.soy.scoping;

import java.util.ArrayList;
import java.util.List;

import net.vtst.ow.eclipse.soy.resource.SoyResourceDescriptionStrategy;
import net.vtst.ow.eclipse.soy.soy.ForCommand;
import net.vtst.ow.eclipse.soy.soy.ForeachCommand;
import net.vtst.ow.eclipse.soy.soy.SoyFile;
import net.vtst.ow.eclipse.soy.soy.Template;
import net.vtst.ow.eclipse.soy.soy.TemplateParameter;
import net.vtst.ow.eclipse.soy.soy.VariableDefinition;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.MapBasedScope;
import org.eclipse.xtext.scoping.impl.SingletonScope;
import org.eclipse.xtext.util.IResourceScopeCache;
import org.eclipse.xtext.util.Tuples;

import com.google.common.base.Predicate;
import com.google.inject.Inject;
import com.google.inject.Provider;
import com.google.inject.name.Named;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class SoyScopeProvider extends AbstractDeclarativeScopeProvider {

  public final static String GLOBAL_SCOPE_PROVIDER_WITH_BUILTINS = "net.vtst.ow.eclipse.soy.SoyScopeProvider.builtin";

  // The cache contains pairs (SoyScopeProvider.class, context) for variable scopes
  @Inject
  private IResourceScopeCache cache;
  
  @Inject 
  private IQualifiedNameConverter converter;
  
  @Inject
  @Named(GLOBAL_SCOPE_PROVIDER_WITH_BUILTINS)
  private IGlobalScopeProvider globalScopeProviderWithBuiltins;
  
  
  protected IScope getGlobalScope(final Resource context, final EReference reference, final Predicate<IEObjectDescription> filter) {
    return globalScopeProviderWithBuiltins.getScope(context, reference, filter);
  }

  // **************************************************************************
  // Toplevel scopes
  
  public IScope getToplevelScope(EObject context, EReference ref) {
    for (EObject obj: context.eResource().getContents()) {
      if (obj instanceof SoyFile) return getToplevelScopeFromSoyFile((SoyFile) obj, ref);
    }
    return IScope.NULLSCOPE; 
  }
  
  public IScope getToplevelScopeFromSoyFile(final SoyFile soyFile, final EReference ref) {
    return cache.get(Tuples.create(SoyScopeProvider.class, "getTemplateScope", Tuples.pair(soyFile, ref)), soyFile.eResource(), new Provider<IScope>() {
      public IScope get() {
        Iterable<IEObjectDescription> localScope = SoyResourceDescriptionStrategy.getEObjectDescriptions(converter, soyFile, true);
        return MapBasedScope.createScope(getGlobalScope(soyFile.eResource(), ref, null), localScope);
      }
    });
  }

  // **************************************************************************
  // Scoping of templates

  public IScope scope_RegularTemplate(EObject context, EReference ref) {
    return getToplevelScope(context, ref);
  }

  public IScope scope_DelTemplate(EObject context, EReference ref) {
    return getToplevelScope(context, ref);
  }
    
  // **************************************************************************
  // Scoping of declarations
  
  public IScope scope_FunctionDeclaration(EObject context, EReference ref) {
    return getToplevelScope(context, ref);
  }

  public IScope scope_PrintDirectiveDeclaration(EObject context, EReference ref) {
    return getToplevelScope(context, ref);
  }

  
  // **************************************************************************
  // Scoping of dollar variables
  // (These variables are defined either by templates or by for loops
  
  public IScope scope_VariableDefinition(EObject context, EReference ref) {
    return computeVariableScope(context);        
  }

  public IScope computeVariableScope(final EObject context) {
    if (context == null) return IScope.NULLSCOPE;
    return cache.get(Tuples.create(SoyScopeProvider.class, "computeVariableScope", context), context.eResource(), new Provider<IScope>() {
      public IScope get() {
        if (context instanceof Template) {
          List<IEObjectDescription> variableDefinitions = new ArrayList<IEObjectDescription>();
          for (TemplateParameter param: ((Template) context).getParam()) {
            variableDefinitions.add(EObjectDescription.create(QualifiedName.create("$" + param.getIdent()), param));            
          }
          return MapBasedScope.createScope(IScope.NULLSCOPE, variableDefinitions);
        } else if (context instanceof ForCommand) {
          VariableDefinition variableDefinition = ((ForCommand) context).getRange().getFor_variable();
          return new SingletonScope(
              EObjectDescription.create(QualifiedName.create(variableDefinition.getIdent()), variableDefinition),
              computeVariableScope(context.eContainer()));
        } else if (context instanceof ForeachCommand) {
          VariableDefinition variableDefinition = ((ForeachCommand) context).getRange().getFor_variable();
          return new SingletonScope(
              EObjectDescription.create(QualifiedName.create(variableDefinition.getIdent()), variableDefinition),
              computeVariableScope(context.eContainer()));
        } else {
          return computeVariableScope(context.eContainer());
        }
      }
    });
  }

}
