// net.vtst.ow.eclipse.less: An Eclipse module for LESS (http://lesscss.org)
// (c) Vincent Simonet, 2011.  All rights reserved.
//
// This file defines an ANTLR grammar for LESS, to be used by Xtext.
// The current version corresponds to LESS 1.1.4 (with a few limitations, see
// ../README).
//
// One of the main particularities of this grammar is that whitespaces are not
// discarded by the lexer (see below that SPACE is not defined as a "hidden"
// terminal in the grammar definition).  This is because parsing CSS selectors
// requires to consider whitespace (.foo .bar { ... } is not the same as
// .foo.bar { ... }.  An alternative would have been to parse selectors in the
// lexer, but this would have been over-complicated.
// Spaces are handled everywhere in the syntactic rules by the OPT_SPACE rule.
// The convention is that every rule shall include the OPT_SPACE to grab the
// potential space at the end of it.  In other words, this means that a
// call to OPT_SPACE has to be inserted *after* every terminal.  There are a few
// exceptions, because of the SPACE separator, and the priority of operators.  They
// are mentioned by comments in the grammar definition.
// (The reason for *after* instead of *before* is that this works much better
// for content assist, because the context contains the node you're currently
// filling.)

grammar net.vtst.ow.eclipse.less.Less hidden(ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate less "http://www.vtst.net/ow/eclipse/less/Less"


// ****************************************************************************
// Parser

// ----------------------------------------------------------------------------
// Stylesheet and blocks

StyleSheet:
  {StyleSheet} OPT_SPACE statements+=ToplevelStatement*
;

ToplevelOrInnerStatement:
  TerminatedMixin
  // LESS accepts @keyframes, @media, @page, @font-face and @charset statements within other
  // blocks, and move them at top level.
  | KeyframesStatement
  | MediaStatement
  | PageStatement
  | FontFaceStatement
  | CharsetStatement
;

UnterminatedToplevelOrInnerStatement:
  VariableDefinition
  | UnterminatedMixin
;
  
ToplevelStatement:
  UnterminatedToplevelOrInnerStatement ';' OPT_SPACE
  | ToplevelRuleSet
  | ImportStatement
  | ToplevelOrInnerStatement
  // This is required to avoid issues with syntax coloring when typing a variable definition.
  // There is a validation rule to report the error.
  | {IncompleteToplevelStatement} '@' OPT_SPACE 
;

InnerStatement:
  InnerRuleSet
  | ToplevelOrInnerStatement
;

UnterminatedInnerStatement:
  Declaration
  | UnterminatedToplevelOrInnerStatement
;

// Several statements include a block.  This rule would accept some ';' that are not legal.
// They are detected by the LessJavaValidator.checkBlockSemicolons
// The rule is written like that in order to meet the three following constraints:
// 1. LL(*) grammar,
// 2. All items of a Block linked to the same node.
/*
Block:
  {Block} '{' OPT_SPACE 
    (item+=InnerStatement)* 
    (item+=UnterminatedInnerStatement 
      (item+=BlockSemicolon (item+=InnerStatement)* (item+=UnterminatedInnerStatement)?)*
    )?
  '}' OPT_SPACE
;
*/

Block:
  {Block} '{' OPT_SPACE contents=BlockContents? '}' OPT_SPACE
;

BlockContents:
  item=UnterminatedInnerStatement (';' OPT_SPACE next=BlockContents?)?
  | item=InnerStatement next=BlockContents?
;

// ----------------------------------------------------------------------------
// @ statements

ImportStatement:
  ('@import' | '@import-multiple' | '@import-once')
  OPT_SPACE uri=(STRING | Uri) OPT_SPACE media_queries=MediaQueryList ';' OPT_SPACE
;

MediaStatement:
  '@media' OPT_SPACE media_queries=MediaQueryList block=Block
;

MediaQueryList:
  {MediaQueryList} (media_query+=MediaQuery (',' OPT_SPACE media_query+=MediaQuery)*)? 
;

MediaQuery:
  (keyword=('only' | 'not') OPT_SPACE)? media_type=IDENT OPT_SPACE ('and' OPT_SPACE expr+=MediaExpression)*
  | expr+=MediaExpression ('and' OPT_SPACE expr+=MediaExpression)*
  | var=AtVariableTerm OPT_SPACE
;

MediaExpression:
  '(' OPT_SPACE media_feature=MediaFeature OPT_SPACE (':' OPT_SPACE expr=Expr)? ')' OPT_SPACE
;

MediaFeature:
  IDENT
;

PageStatement:
  '@page' OPT_SPACE (':' pseudo_page=IDENT OPT_SPACE)? block=Block
;

FontFaceStatement:
  '@font-face' OPT_SPACE block=Block
;

CharsetStatement:
  '@charset' OPT_SPACE charset=STRING OPT_SPACE ';' OPT_SPACE
;

// ----------------------------------------------------------------------------
// @keyframes
// See http://www.w3.org/TR/css3-animations/#keyframes

KeyframesStatement:
  {KeyframesStatement} KeyframesSymbol SPACE ident=IDENT OPT_SPACE '{' OPT_SPACE blocks+=KeyframesBlock* '}' OPT_SPACE
;

KeyframesSymbol:
  '@keyframes'
  | '@-webkit-keyframes'
  | '@-moz-keyframes'
  | '@-ms-keyframes'
  | '@-o-keyframes'
;

KeyframesBlock:
  selector=KeyframesSelector block=Block
;

KeyframesSelector:
  'from' OPT_SPACE
  | 'to' OPT_SPACE
  | PERCENTAGE OPT_SPACE
;

// ----------------------------------------------------------------------------
// @ variables

// Implicit variables can be defined by mixin definitions. 
AtVariableRefTarget:
  Mixin | AtVariableRef | AtVariableDef
;

// This is the same as AtVariable, made different only for syntax highlighting purpose.
AtVariableDef:
  ident=AT_IDENT
;

AtVariableRef:
  variable=[AtVariableRefTarget|AT_IDENT]
;

AtVariableTerm:
    AtVariableRef
  | {At2Variable} ident=AT2_IDENT
;


// ----------------------------------------------------------------------------
// @ variable definitions

// There is a trailing OPT_SPACE in this rule, because there is no in Term
VariableDefinition:
  lhs=VariableDefinitionLhs OPT_SPACE ':' OPT_SPACE expr=Expr
;

// This intermediate class is useful only for syntax highlighting purpose
VariableDefinitionLhs:
  variable=AtVariableDef
;

// ----------------------------------------------------------------------------
// Mixins

// The same set of rules parses mixin definitions and mixin calls.  This is to make the
// grammar LL(*) despite the recursive Term rule.
// See LessJavaValidator.checkMixin

// This is the super class for Mixins.  It is not use in the grammar only in the code.
Mixin:
  TerminatedMixin | UnterminatedMixin
;

// The final ';' is made optional so that it can be omitted for final statements.
// See LessJavaValidator.checkFinalSemicolonOfTerminatedMixin
TerminatedMixin:
  selectors=MixinSelectors parameters=MixinParameters
  (priority=Priority (hasFinalSemicolon?=';' OPT_SPACE)? | guards=MixinDefinitionGuards? body=Block)
;

UnterminatedMixin:
  selectors=MixinSelectors priority=Priority
;

MixinSelectors:
  selector+=HashOrClassRef
  (combinator+=MixinCallCombinator selector+=HashOrClassRef)* OPT_SPACE 
;

MixinParameters:
  {MixinParameters}
  '(' OPT_SPACE
  (parameter+=MixinParameter (sep+=(',' | ';') OPT_SPACE parameter+=MixinParameter)*)?
  varArg=MixinVarParameter? 
  ')' OPT_SPACE 
;

MixinVarParameter:
  {MixinVarParameter} (sep=(',' | ';') OPT_SPACE)? '...' OPT_SPACE
;

MixinParameter:
    ident=AtVariableDef OPT_SPACE hasDefaultValue?=':' OPT_SPACE term+=Term (SPACE term+=Term)* OPT_SPACE
  | term+=Term (SPACE term+=Term)* OPT_SPACE
;

MixinDefinitionGuards:
  'when' OPT_SPACE guard+=MixinDefinitionGuard (('and' | ',') OPT_SPACE guard+=MixinDefinitionGuard)*
;

MixinDefinitionGuard:
  ('not' OPT_SPACE)? '(' OPT_SPACE expr=MixinDefinitionGuardExpr ')' OPT_SPACE
;

MixinDefinitionGuardExpr:
  term+=MixinDefinitionGuardTerm OPT_SPACE (('>' | '>=' | '=' | '=<' | '<') OPT_SPACE term+=MixinDefinitionGuardTerm OPT_SPACE)? 
;

MixinDefinitionGuardTerm: 
  Term
;

// ----------------------------------------------------------------------------
// RuleSets

ToplevelRuleSet:
  selector+=ToplevelSelector (',' OPT_SPACE selector+=ToplevelSelector)* 
  block=Block
;

InnerRuleSet:
  selector+=InnerSelector (',' OPT_SPACE selector+=InnerSelector)*
  block=Block
;


// ----------------------------------------------------------------------------
// Selectors

// There is a trailing OPT_SPACE in this rule, because there is no in SimpleSelector
ToplevelSelector:
  selector+=SimpleSelector
  (combinator+=Combinator selector+=SimpleSelector)* OPT_SPACE
;

// There is a trailing OPT_SPACE in this rule, because there is no in SimpleSelector
InnerSelector:
  combinator+=RootCombinator selector+=SimpleSelector
  (combinator+=Combinator selector+=SimpleSelector)* OPT_SPACE
;

Combinator:
  {ChildCombinator} OPT_SPACE '>' OPT_SPACE
  | {AdjacentSiblingCombinator} OPT_SPACE '+' OPT_SPACE
  | {GeneralSiblingCombinator} OPT_SPACE '~' OPT_SPACE
  | {DescendantSelector} SPACE
;

RootCombinator returns Combinator:
  {ChildCombinator} '>' OPT_SPACE
  | {AdjacentSiblingCombinator} '+' OPT_SPACE
  | {GeneralSiblingCombinator} '~' OPT_SPACE
  | {DescendantSelector}
;

MixinCallCombinator returns Combinator:
  {ChildCombinator} OPT_SPACE '>' OPT_SPACE
  | {DescendantSelector} SPACE
;

// This rule does not end with OPT_SPACE, because of combinators
SimpleSelector:
  {SimpleSelectorWithRoot} root=RootSelector
  (criteria+=CommonSelector | criteria+=Pseudo)*
  | {SimpleSelectorWithoutRoot} (criteria+=CommonSelector | criteria+=Pseudo)+
;
SimpleSelectorInNot:
  {SimpleSelectorInNotWithRoot} root=RootSelector
  (criteria+=CommonSelector | criteria+=PseudoWithoutNot)*
  | {SimpleSelectorInNotWithoutRoot} (criteria+=CommonSelector | criteria+=PseudoWithoutNot)+
;

RootSelector: IDENT_OR_KEYWORD | '*' | AMPERSAND_IDENT;
CommonSelector: HashOrClass | VariableSelector | Attrib;
AMPERSAND_IDENT returns ecore::EString: '&' IDENT_OR_KEYWORD?;

// This terminal is a hack in order to have a custom value converter which prepend a '@'.  See
// the code of org.eclipse.xtext.linking.impl.LinkingHelper.
IDENT_OR_KEYWORD_PREPEND_AT returns ecore::EString: IDENT_OR_KEYWORD;
VariableSelector:
  '.' IDENT_OR_KEYWORD? ('@' '{' variable+=[AtVariableRefTarget|IDENT_OR_KEYWORD_PREPEND_AT] '}' IDENT_OR_KEYWORD?)+
;

HashOrClass: Hash | Class;
HashOrClassRef: ident=[HashOrClassRefTarget|HASH_OR_CLASS_IDENT];
HashOrClassRefTarget: HashOrClass | HashOrClassRef;
HASH_OR_CLASS_IDENT returns ecore::EString: HASH_IDENT | CLASS_IDENT;

// This rule does not end with OPT_SPACE, because of combinators
Hash: ident=HASH_IDENT;
HASH_IDENT returns ecore::EString: HASH_COLOR | HASH_OTHER;

// This rule does not end with OPT_SPACE, because of combinators
Class: ident=CLASS_IDENT;
CLASS_IDENT returns ecore::EString: '.' IDENT_OR_KEYWORD;
IDENT_OR_KEYWORD returns ecore::EString: IDENT | 'and' | 'even' | 'from' | 'important' | 'n' | 'not' | 'odd' | 'only' | 'to' | 'when';

// This rule does not end with OPT_SPACE, because of combinators
Attrib:
  '[' OPT_SPACE attribute=IDENT_OR_KEYWORD OPT_SPACE 
  (operator=('=' | '~=' | '^=' | '$=' | '|=' | '*=') OPT_SPACE ((value=IDENT_OR_KEYWORD | value=STRING) OPT_SPACE)?)? ']'
;

// This rule does not end with OPT_SPACE, because of combinators
Pseudo:
  PseudoWithoutNot
  | {PseudoClassNot} ':' 'not' '(' OPT_SPACE selector=SimpleSelectorInNot OPT_SPACE ')'
;

PseudoWithoutNot:
  {PseudoClassIdent} ':' ident=IDENT
  | {PseudoClassFunction} ':' function=IDENT '(' OPT_SPACE (arg=PseudoClassFunctionArgument OPT_SPACE)? ')'
  | {PseudoElement} '::' ident=IDENT  
;

PseudoClassFunctionArgument:
  ident=IDENT
  | nth=PseudoClassNth  //  This includes NUMBER
  | var=AtVariableTerm
;

PseudoClassNth:
  {PseudoClassNth} ('+' | '-')? NUMBER? 'n' (OPT_SPACE ('+' | '-') OPT_SPACE NUMBER)?
  | {PseudoClassNth} ('+' | '-')? NUMBER
  | {PseudoClassNth} ('odd' | 'even')
  | {PseudoClassNthSpecialCase} special=PseudoClassNthSpecialCaseString
;

PseudoClassNthSpecialCaseString returns ecore::EString:
  IDENT OPT_SPACE ('+' | '-') OPT_SPACE NUMBER  // -n+1
  | NUMBER IDENT  // 1n-1
  | '+' NUMBER IDENT  // +1n-1
  | '-' NUMBER IDENT // -1n-1
  | '+' IDENT  // +n-1
  | IDENT NUMBER  // -n- 1
;

// ----------------------------------------------------------------------------
// Declarations

Declaration:
  star_property_hack?='*'? property=Property OPT_SPACE ':' OPT_SPACE expr=Expr 
  priority=Priority
;

Priority:
  {Priority} ('!' OPT_SPACE important?='important' OPT_SPACE)?
;

Property: IDENT_OR_KEYWORD;

// There is a trailing OPT_SPACE in this rule, because there is no in SimpleSelector
// '/' disabled, as it is not properly handled by LESS.
Expr:
  terms+=Term (operators+=Operator terms+=Term)* OPT_SPACE
;

Operator:
  {SpaceOperator} SPACE
  | {ComaOperator} ',' OPT_SPACE
;

// ----------------------------------------------------------------------------
// Terms

// This rule does not end with OPT_SPACE, because of operators in Expr
Term:
  {IdentTerm} ident=IDENT_OR_KEYWORD
  | {StringTerm} string=STRING
  | {UriTerm} uri=Uri
  | {EscapedStringTerm} '~' string=STRING
  | {JsEvaluationTerm} js=JS_EVALUATION
  | {EscapedJsEvaluationTerm} '~' js=JS_EVALUATION
  | ExtendedTerm
;

/*
  a: 2 - 1; -> 3
  b: 2- 1; -> 3
  c: 2 -1; -> 2 -1
  d: 2-1; -> 3
 
 */
ExtendedTerm: ExtendedTerm1;

ExtendedTerm1 returns ExtendedTerm:
  term+=ExtendedTerm2 
  ((SPACE operator+=('+' | '-') SPACE | operator+=('+' | '-')) 
    term+=ExtendedTerm2
  )*
;

ExtendedTerm11 returns ExtendedTerm:
  term+=ExtendedTerm2 
  (OPT_SPACE operator+=('+' | '-') OPT_SPACE term+=ExtendedTerm2)*
;

ExtendedTerm2 returns ExtendedTerm:
  term+=SimpleTerm
  (OPT_SPACE operator+=('*' | '/') OPT_SPACE term+=SimpleTerm)*
;

// This rule does not end with OPT_SPACE, because of operators in Expr
SimpleTerm:
  NumericLiteral
  | AtVariableTerm
  | FunctionTerm
  | {ParenthesizedTerm} '(' OPT_SPACE term=ExtendedTerm11 OPT_SPACE ')'
  | {UnaryTerm} operator='-' term=SimpleTerm
;

// This rule does not end with OPT_SPACE, because of operators in Expr
FunctionTerm:
  function=(IDENT_OR_KEYWORD | PERCENT) 
  '(' OPT_SPACE (arg=IDENT_OR_KEYWORD OPT_SPACE '=' OPT_SPACE)? (expr=Expr)? ')'
;

// This rule does not end with OPT_SPACE, because of operators in Expr
NumericLiteral:
  {NumberTerm} value=NUMBER
  | {PercentageTerm} value=PERCENTAGE
  | {NumberWithUnitTerm} value=NUMBER unit=IDENT
  | {HashColorTerm} value=HASH_COLOR
;

// This rule does not end with OPT_SPACE, because of operators in Expr
Uri:
  'url(' STRING ')'
  | URL
;

// ****************************************************************************
// Pseudo-terminals

// This is WS*, not WS?, because whjte-spaces may be split by comments.
OPT_SPACE returns ecore::EString:
  WS*
;

// This is WS+, not WS, because whjte-spaces may be split by comments.
SPACE returns ecore::EString:
  WS+
;

// ****************************************************************************
// Lexer

// The character \f is deleted from the terminals STRING and SPACE, because it
// causes Xtext to crash.  A workaround was to configure Xtext to use XML 1.1,
// but this reveals another bug.

terminal fragment H : '0' .. '9' | 'a' .. 'f' | 'A' .. 'F';
terminal fragment H1_6 : H (H (H (H (H (H)?)?)?)?)?;
terminal fragment UNICODE : '\\' H1_6 ('\r\n' | ' ' | '\t' | '\r' | '\n' /*| '\f' */)?;
terminal fragment ESCAPE : UNICODE | '\\' !('\r' | '\n' /*| '\f'*/ | H);
terminal fragment NL : '\n' | '\r\n' | '\r' /*| '\f'*/;
terminal fragment IDENT_CHAR : ('_'|'a'..'z'|'A'..'Z'|'0'..'9'|'-');
terminal fragment NMSTART: ('_'|'a'..'z'|'A'..'Z') /* | NON_ASCII */ | ESCAPE;
terminal fragment NMCHAR: IDENT_CHAR /* | NON_ASCII */ | ESCAPE;
terminal IDENT : '-'? NMSTART NMCHAR*;
terminal PERCENT : '%';
terminal AT_IDENT: '@' IDENT_CHAR+;
terminal AT2_IDENT: '@' '@' IDENT_CHAR+;
terminal fragment STRING1: '"' (!('\n' | '\r' /*| '\f'*/ | '\\' | '\"') | '\\' NL | ESCAPE)* '"';
terminal fragment STRING2: '\'' (!('\n' | '\r' /*| '\f'*/ | '\\' | '\'') | '\\' NL | ESCAPE)* '\'';
terminal STRING : STRING1 | STRING2;

terminal JS_EVALUATION : '`' (!'`')* '`';
terminal HASH_COLOR : '#' ('0'..'9'|'a'..'f'|'A'..'F')('0'..'9'|'a'..'f'|'A'..'F')('0'..'9'|'a'..'f'|'A'..'F')
  (('0'..'9'|'a'..'f'|'A'..'F')('0'..'9'|'a'..'f'|'A'..'F')('0'..'9'|'a'..'f'|'A'..'F'))?
;
terminal HASH_OTHER : '#' ('_'|'a'..'z'|'A'..'Z'|'0'..'9'|'-')+;
terminal NUMBER :  (('0' .. '9')+) | (('0' .. '9')* '.' ('0' .. '9')+);
terminal PERCENTAGE : NUMBER '%';
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT   : '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS : (' ' | '\t' | '\r' | '\n' /*| '\f'*/)+;
terminal URL : 'url(' (!('"' | "'") (!')')*) ')';
terminal ANY_OTHER: .;
